/*

This script splits date categorized JSON files generated by jsonMonthDivider.js even further.
Currently it splits them into six further parts: Videos from 1st to 5th are put into a separate file
(e.g. vids[YYYYMM]1.json), from 6th to 10th in another (e.g. vids[YYYYMM]2.json) and so on.
The final sixth file (e.g. vids[YYYYMM]6.json) covers everything from 26th and onward.

*/

let path = require('path');
let fs = require('fs');

// The folder that contains the files generated by jsonMonthDivider.js
const folderLocation = 'F:/Dropbox/NodeJS/YTPMV Metadata Archive JSON/split_parts2/vids';
// The folder where the further divided files are saved to
const folderLocationDest = 'F:/Dropbox/NodeJS/YTPMV Metadata Archive JSON/split_parts3/vids';
const yearMax = 202512;
const yearMin = 200401;

// const yearMax = 202012;
// const yearMin = 202012;
// let tmpArr = [];

for (let i = yearMax; i >= yearMin; i--) {
   let jsonFile;

   try {
      jsonFile = JSON.parse(fs.readFileSync((folderLocation + i + '.json'), 'utf8'));
   } catch (error) {
      continue;
   }
   
   let splitNumber = 5;
   let maxVal = Math.ceil(31 / splitNumber);
   
   for (let j = maxVal; j > 0; j--) {
      let maxDate = j * splitNumber;
      if (j === maxVal) maxDate++;
      let minDate = ((j - 1) * splitNumber) + 1;

   /*
   for (let j = 8; j > 0; j--) {
      let maxDate = j * 4;
      if (j === 8) maxDate++;
      let minDate = ((j - 1) * 4) + 1;  */

      maxDate = i + maxDate.toString().padStart(2, '0');
      minDate = i + minDate.toString().padStart(2, '0');

      let filteredJson = jsonFile.filter(ent => (getUploadDate(ent) >= minDate) && (getUploadDate(ent) <= maxDate)
      // let filteredJson = jsonFile.filter(ent => (ent.upload_date >= minDate) && (ent.upload_date <= maxDate)
      // TEMPORARY! This makes the script ignore BiliBili videos. Those videos remain in the original JSON files
         && (ent.extractor_key !== "BiliBili")
        );

      // tmpArr.push(...jsonFile.filter(ent => (!ent.uId) && (ent.extractor_key === "Youtube")));

      if (filteredJson.length > 0) fs.writeFileSync(folderLocationDest + i + j + '.json', JSON.stringify(filteredJson));
      console.log('Saved ' + folderLocationDest + i + j);
   }
}

function getUploadDate(entry) {
   if (!entry.timestamp) return entry.upload_date;
   
   let convertedTimestamp = new Date(entry.timestamp * 1000);
   return convertedTimestamp.getUTCFullYear() + String(convertedTimestamp.getUTCMonth() + 1).padStart(2, '0') + String(convertedTimestamp.getUTCDate()).padStart(2, '0');
}

// console.log(tmpArr);